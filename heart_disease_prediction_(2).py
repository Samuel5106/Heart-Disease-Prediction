# -*- coding: utf-8 -*-
"""Heart_Disease_Prediction (2).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WlFYKTxEkBBw3TZ56U4LNIvcjRcqrPH3

Importing the Libaries
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Processing"""

#loading the Patinets data to a Pandas DataFrane
heart_data = pd.read_csv("/heart_disease_data.csv")
heart_data.head()

#number of rows and columns in the dataset
heart_data.shape

#Info about the dataset
heart_data.info()

"""It seems no nulls in the dataset"""

#checking for the missing values(null values)
heart_data.isna().sum()

#Statistical measure about the data 
heart_data.describe()

#checking the distribution of Target variable

heart_data['target'].value_counts()

"""1--> Reprasents Defective Heart

0--> Healthy Heart

Splitting the Features and Target
"""

#here target column is dependent varaible and 
#remining column are independent 

X = heart_data.drop(columns='target', axis =1)
Y = heart_data['target']

print(X)

print(Y)

"""Splitting the data into Training data and Test Data """

X_train,X_test,Y_train,Y_test = train_test_split(X,Y, test_size = 0.2, stratify=Y,random_state = 2)

print(X.shape,X_train.shape,X_test.shape)

"""setting the “stratify” argument to the y component of the original dataset. This will be used by the train_test_split() function to ensure that both the train and test sets have the proportion of examples in each class that is present in the provided “y” array.

Model Training 

Logistic Regression
"""

model = LogisticRegression()

#trainig the LogisticRegression model with training data 
model.fit(X_train,Y_train) #note: for complex or large data it takes more time

"""Model Evalution

Accuarcy Score
"""

#accuracy on trainigg data 
X_train_prediction = model.predict(X_train)
traning_data_accuracy =  accuracy_score(X_train_prediction ,Y_train)
#it compares the prediction data and Y_train data, and gives accuracy score

print("Accuracy on training data: ", traning_data_accuracy)

"""85% the is accuarcy of our predicted values, (Good model)

Building a Predicitive System
"""

input_data = (62,0,0,140,268,0,0,160,0,3.6,0,2,2)


#change the input data to numpy array, because dataset requires
input_data_as_numpy_array = np.asarray(input_data)

#reshape the numpy array as we are predicting for only on instance so
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1) #one instane

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]==0):
  print("The Person does not have a Heart Disease")
else:
  print("The Person has Heart Disease")

